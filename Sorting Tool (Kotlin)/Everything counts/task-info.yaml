type: edu
files:
- name: src/sorting/Main.kt
  visible: true
  text: |
    package sorting

    import java.util.*

    fun main(args: Array<String>) {

        if(args.size!=0){
            if (args[1] == "long") {
                number()
            }
            if (args[1] == "line") {
                line()
            }
            if (args[1] == "word") {
                word()
            }}

    }

    fun number(): Unit {
        var count = 0
        var greatest = 0
        var countGr = 0
        val scanner = Scanner(System.`in`)
        while (scanner.hasNext()) {
            val d = scanner.next().toInt()
            if (count == 0) {
                greatest = d
                countGr++
            }

            if (greatest == d) {

                countGr++
            }
            if (greatest < d) {
                greatest = d
                countGr = 1
            }
            if (greatest > d) {

            }
            count++
        }
        scanner.close()
        println("Total numbers:$count")
        println("The greatest number: $greatest ($countGr time(s)).")
    }

    fun line() {}
    fun word() {}
  learner_created: false
- name: test/common/SortingToolStage1Test.kt
  visible: true
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage1Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage1Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return checkForLong(clue, reply)
        }
    }

    fun stage1Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   33 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true
            ),
            createTest("1 2 2 3 4 5 5", true),
            createTest("1 1 2 2 3 4 4 4", false)
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
        consoleInput: String,
        revealTest: Boolean,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
            .setInput(consoleInput)
            .addArguments(*args)
    }

    fun checkForLong(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val regex = """(\d+)\D+(\d+)\D+(\d+)""".toRegex()
        val matchResult = regex.find(reply)
        if (matchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't parse your output. Please check if your output contains three numbers\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output.")
            }
        }

        val (totalNumbers, greatestNumber, greatestNumberCount) = matchResult.groupValues.drop(1).map { it.toInt() }

        val scanner = Scanner(clue.consoleInput)

        val actualNumbers = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            actualNumbers.add(scanner.nextInt())
        }

        val actualTotal = actualNumbers.size

        if (actualTotal != totalNumbers) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total numbers ($totalNumbers) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total numbers are incorrect.")
            }
        }

        val actualMax = actualNumbers.maxOrNull()

        if (actualMax != greatestNumber) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Greatest number ($greatestNumber) is incorrect. Expected: $actualMax.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Greatest number is incorrect.")
            }
        }

        val actualMaxCount = actualNumbers.count { it == actualMax }

        if (actualMaxCount != greatestNumberCount) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Greatest number times ($greatestNumberCount) are incorrect. Expected: $actualMaxCount.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Greatest number times are incorrect.")
            }
        }

        return CheckResult(true)
    }
  learner_created: false
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long", "-sortingType", "natural"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "long"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                true,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "line"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "word"
            ),
            createTest(
                """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                false,
                "-sortingType", "byCount", "-dataType", "long"
            )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
        consoleInput: String,
        revealTest: Boolean,
        vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
            .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
            .setInput(consoleInput)
            .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
        actualTokens: List<TokenType>,
        sortedTokensParser: (String) -> List<TokenType>,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't parse your output: expected 2 lines.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Sorted tokens are incorrect.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
        actualTokens: List<TokenType>,
        tokenParser: (String) -> TokenType,
        clue: SortingToolClue,
        reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Can't find number in the first line of your output.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                    false,
                    "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                        revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                        false,
                        "Token ($token) is incorrect. Expected: $actualToken.\n" +
                            revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
feedback_link: https://hyperskill.org/learn/step/9626#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 08 May 2023 09:42:49 UTC"
record: 4
